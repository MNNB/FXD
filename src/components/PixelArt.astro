---
// No props needed for this component for now
---
<div class="pixel-art flow">
  <div class="canvas-container">
    <canvas id="pixel-canvas" width="512" height="512"></canvas>
    <div class="tools flex">
      <div class="color active" data-color="#000000" style="background-color: var(--color-black);"></div>
      <div class="color" data-color="#FF0060" style="background-color: var(--color-red);"></div>
      <div class="color" data-color="#F6FA70" style="background-color: var(--color-yellow);"></div>
      <div class="color" data-color="#00DFA2" style="background-color: var(--color-teal);"></div>
      <div class="color" data-color="#0079FF" style="background-color: var(--color-blue);"></div>
      <button id="erase-button" class="button">Erase</button>
    </div>
  </div>
</div>

<style>
  .pixel-art {
    position: relative;
    max-width: 512px;
    margin: 0 auto; /* Center it if it's in a full-width column */
     /* The 'flow' class for vertical spacing is applied on the root div */
  }

  .canvas-container {
    position: relative;
    width: 100%; /* Make canvas container responsive */
    max-width: 512px; /* Max width of the canvas itself */
    aspect-ratio: 1 / 1; /* Maintain square aspect ratio for the container */
    margin: 0 auto; /* Center canvas container if its parent is wider */
  }

  #pixel-canvas {
    display: block;
    width: 100%;
    height: 100%; /* Fill the responsive container */
    image-rendering: pixelated;
    cursor: crosshair;
    background: var(--color-white); /* BG for canvas, image might load over it */
    border: 1px solid var(--color-light-gray); /* Optional: border for canvas */
  }

  .tools {
    /* position: absolute;
    top: 0.5rem;
    right: 0.5rem; */ /* Consider placing tools below canvas for better responsiveness */
    display: flex;
    justify-content: center; /* Center tools */
    align-items: center;
    gap: 0.5rem;
    padding: var(--space-xs) 0; /* Add some padding */
    background-color: rgba(255, 255, 255, 0.8); /* Slight background for tool visibility */
    border-radius: 4px;
    margin-top: var(--space-xs);
    flex-wrap: wrap; /* Allow tools to wrap on smaller screens */
  }

  .color {
    width: 1.5rem;
    height: 1.5rem;
    cursor: pointer;
    border: 2px solid transparent;
    border-radius: 4px; /* Rounded corners for color swatches */
  }

  .color.active {
    border-color: var(--color-black);
    transform: scale(1.1); /* Indicate active color */
  }

  #erase-button { /* Style as a button, inheriting from global .button potentially */
    font-family: var(--font-mono);
    padding: 0.25rem 0.5rem;
    cursor: pointer;
    border: 1px solid var(--color-light-gray);
    border-radius: 4px;
    background: var(--color-white);
    color: var(--color-text);
    transition: background-color 0.2s ease, color 0.2s ease;
  }
  #erase-button:hover {
    background-color: var(--color-light-gray);
  }

  @media (max-width: 768px) {
    .pixel-art {
        /* Adjust max-width if needed, or let parent grid handle it */
    }
    .canvas-container {
       /* Container will scale with parent */
    }
    .tools {
      gap: 0.25rem; /* Smaller gap for tools */
      padding: var(--space-xs) var(--space-sm);
    }
    .color {
      width: 1.25rem;
      height: 1.25rem;
    }
    #erase-button {
      padding: 0.2rem 0.4rem;
    }
  }
</style>

<script>
  // PIXEL ART CANVAS SCRIPT (Moved from main.js)
  // Ensure this script runs after the DOM is ready for these elements
  document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('pixel-canvas') as HTMLCanvasElement | null;
    if (!canvas) return; // Guard if canvas is not found

    const ctx = canvas.getContext('2d');
    if (!ctx) return; // Guard if context is not available

    const pixelSize = canvas.width / 64; // Assuming canvas is 512px, so pixelSize is 8
    let drawing = false;
    let currentColor = '#000000';

    // Load background image
    const image = new Image();
    image.src = '/images/projects/me.png'; // Ensure this path is correct relative to public folder
    image.onload = () => {
      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
    };
    image.onerror = () => {
      console.error("Failed to load pixel art background image at /images/projects/me.png");
      // Optionally draw a fallback background
      ctx.fillStyle = '#e0e0e0'; // A light gray fallback
      ctx.fillRect(0,0,canvas.width, canvas.height);
    }


    // Color selection
    const colorButtons = document.querySelectorAll('.pixel-art .tools .color'); // Scope selectors to this component
    colorButtons.forEach(colorButton => {
      colorButton.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLElement;
        currentColor = target.dataset.color || '#000000';
        colorButtons.forEach(c => c.classList.remove('active'));
        target.classList.add('active');
      });
    });

    // Erase functionality
    const eraseButton = document.getElementById('erase-button');
    if (eraseButton) {
      eraseButton.addEventListener('click', () => {
        // Redraw the background image to "erase"
        if (image.complete && image.naturalHeight !== 0) { // Check if image is loaded
            ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear first in case image failed
            ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
        } else {
            // Fallback if image hasn't loaded or failed (e.g., clear to white/fallback)
            ctx.fillStyle = '#FFFFFF'; // Or your chosen background color
            ctx.fillRect(0, 0, canvas.width, canvas.height);
             if (!image.complete || image.naturalHeight === 0) {
                console.warn("Pixel art background image not loaded, erasing to white.");
             }
        }
      });
    }

    // Drawing functions
    const handleDraw = (e: MouseEvent | TouchEvent) => {
      if (!drawing && e.type !== 'mousedown' && e.type !== 'touchstart') return;

      const rect = canvas.getBoundingClientRect();
      let clientX, clientY;

      if (e instanceof MouseEvent) {
        clientX = e.clientX;
        clientY = e.clientY;
      } else if (e.touches && e.touches.length > 0) {
        clientX = e.touches[0].clientX;
        clientY = e.touches[0].clientY;
      } else {
        return; // No coordinates to draw with
      }
      
      // Adjust for canvas scaling if its display size is different from its resolution
      const scaleX = canvas.width / rect.width;
      const scaleY = canvas.height / rect.height;

      const x = Math.floor(((clientX - rect.left) * scaleX) / pixelSize);
      const y = Math.floor(((clientY - rect.top) * scaleY) / pixelSize);
      
      ctx.fillStyle = currentColor;
      ctx.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize);
    }

    canvas.addEventListener('mousedown', (e) => {
      drawing = true;
      handleDraw(e);
    });
    canvas.addEventListener('touchstart', (e) => {
      drawing = true;
      handleDraw(e);
      e.preventDefault(); // Prevent scrolling while drawing
    }, { passive: false });

    const stopDrawing = () => {
      drawing = false;
    }
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseleave', stopDrawing); // Changed from mouseout
    canvas.addEventListener('touchend', stopDrawing);
    canvas.addEventListener('touchcancel', stopDrawing);


    canvas.addEventListener('mousemove', handleDraw);
    canvas.addEventListener('touchmove', (e) => {
        handleDraw(e);
        e.preventDefault(); // Prevent scrolling while drawing
    }, { passive: false });

  });
</script>